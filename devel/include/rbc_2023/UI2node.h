// Generated by gencpp from file rbc_2023/UI2node.msg
// DO NOT EDIT!


#ifndef RBC_2023_MESSAGE_UI2NODE_H
#define RBC_2023_MESSAGE_UI2NODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rbc_2023
{
template <class ContainerAllocator>
struct UI2node_
{
  typedef UI2node_<ContainerAllocator> Type;

  UI2node_()
    : mode(0)
    , isCheckShowWrite(false)
    , isCheckShowRead(false)
    , data()  {
    }
  UI2node_(const ContainerAllocator& _alloc)
    : mode(0)
    , isCheckShowWrite(false)
    , isCheckShowRead(false)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _mode_type;
  _mode_type mode;

   typedef uint8_t _isCheckShowWrite_type;
  _isCheckShowWrite_type isCheckShowWrite;

   typedef uint8_t _isCheckShowRead_type;
  _isCheckShowRead_type isCheckShowRead;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::rbc_2023::UI2node_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rbc_2023::UI2node_<ContainerAllocator> const> ConstPtr;

}; // struct UI2node_

typedef ::rbc_2023::UI2node_<std::allocator<void> > UI2node;

typedef boost::shared_ptr< ::rbc_2023::UI2node > UI2nodePtr;
typedef boost::shared_ptr< ::rbc_2023::UI2node const> UI2nodeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rbc_2023::UI2node_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rbc_2023::UI2node_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rbc_2023::UI2node_<ContainerAllocator1> & lhs, const ::rbc_2023::UI2node_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.isCheckShowWrite == rhs.isCheckShowWrite &&
    lhs.isCheckShowRead == rhs.isCheckShowRead &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rbc_2023::UI2node_<ContainerAllocator1> & lhs, const ::rbc_2023::UI2node_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rbc_2023

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rbc_2023::UI2node_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rbc_2023::UI2node_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rbc_2023::UI2node_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rbc_2023::UI2node_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rbc_2023::UI2node_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rbc_2023::UI2node_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rbc_2023::UI2node_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3929c6344e36b839b0a0e74ac70b59cf";
  }

  static const char* value(const ::rbc_2023::UI2node_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3929c6344e36b839ULL;
  static const uint64_t static_value2 = 0xb0a0e74ac70b59cfULL;
};

template<class ContainerAllocator>
struct DataType< ::rbc_2023::UI2node_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rbc_2023/UI2node";
  }

  static const char* value(const ::rbc_2023::UI2node_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rbc_2023::UI2node_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 mode\n"
"bool isCheckShowWrite\n"
"bool isCheckShowRead\n"
"int32[] data\n"
;
  }

  static const char* value(const ::rbc_2023::UI2node_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rbc_2023::UI2node_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.isCheckShowWrite);
      stream.next(m.isCheckShowRead);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UI2node_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rbc_2023::UI2node_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rbc_2023::UI2node_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "isCheckShowWrite: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isCheckShowWrite);
    s << indent << "isCheckShowRead: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isCheckShowRead);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RBC_2023_MESSAGE_UI2NODE_H
